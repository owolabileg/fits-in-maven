VERIFICATIONCODE

package monitoredfits.rv;

public class Verification {

	static public Integer fitsExternalMoneyTransferCount;
	static public Double fitsExternalMoneyTransferAmount;

	static public void setupVerification() {

		fitsExternalMoneyTransferCount = 0;
		fitsExternalMoneyTransferAmount = 0.0;

	}

}


PRELUDE

package monitoredfits.rv;

import monitoredfits.fits.UserInfo;
import monitoredfits.fits.BackEnd;
import monitoredfits.fits.FrontEnd;


AUTOMATA

// P2
// The transaction system must be initialised before any user logs in.
// + The initialisation can only happen before shutdown.
property starting Start {
    Start >>> after BackEnd.initialise(..) >>> Initialised
    Initialised >>> before BackEnd.shutdown(..) >>> Shutdown
    Start >>> before UserInfo.openSession(..) >>> Bad[P2 violated]
    Shutdown >>> before UserInfo.openSession(..) >>> Bad[P2 violated]
}


// P8
// The administrator must reconcile accounts every 1000 attempted external money transfers or an
// aggregate total of one million dollars in attempted external transfers.
property starting Start {
    Start >>> before FrontEnd.USER_payToExternal(Integer uid, Integer sid, String accnum, Double amount)
        | (   Verification.fitsExternalMoneyTransferCount + 1 >= 1000
           || Verification.fitsExternalMoneyTransferAmount + amount >= 1000000)
        >>> Bad[P8 violated]

    Start >>> after FrontEnd.ADMIN_reconcile(..) |-> {
        Verification.fitsExternalMoneyTransferCount = 0;
        Verification.fitsExternalMoneyTransferAmount = 0.0;
    } >>> Start

    Start >>> before FrontEnd.USER_payToExternal(Integer uid, Integer sid, String accnum, Double amount)
        |-> {
            Verification.fitsExternalMoneyTransferCount++;
            Verification.fitsExternalMoneyTransferAmount += amount;
        } >>> Start
}
